/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppBooking {
        "bookings": any[];
        "sports": any[];
        "venues": any[];
    }
    interface AppHistory {
        "bookings": any[];
        "sports": any[];
        "venues": any[];
    }
    interface AppHome {
    }
    interface AppManagement {
        "sports": any[];
        "venues": any[];
    }
    interface AppProfile {
        "name": string;
    }
    interface AppRoot {
    }
}
export interface AppBookingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppBookingElement;
}
export interface AppHistoryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppHistoryElement;
}
export interface AppManagementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppManagementElement;
}
export interface AppRootCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAppRootElement;
}
declare global {
    interface HTMLAppBookingElementEventMap {
        "newBooking": any;
    }
    interface HTMLAppBookingElement extends Components.AppBooking, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppBookingElementEventMap>(type: K, listener: (this: HTMLAppBookingElement, ev: AppBookingCustomEvent<HTMLAppBookingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppBookingElementEventMap>(type: K, listener: (this: HTMLAppBookingElement, ev: AppBookingCustomEvent<HTMLAppBookingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppBookingElement: {
        prototype: HTMLAppBookingElement;
        new (): HTMLAppBookingElement;
    };
    interface HTMLAppHistoryElementEventMap {
        "cancelBooking": any;
    }
    interface HTMLAppHistoryElement extends Components.AppHistory, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppHistoryElementEventMap>(type: K, listener: (this: HTMLAppHistoryElement, ev: AppHistoryCustomEvent<HTMLAppHistoryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppHistoryElementEventMap>(type: K, listener: (this: HTMLAppHistoryElement, ev: AppHistoryCustomEvent<HTMLAppHistoryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppHistoryElement: {
        prototype: HTMLAppHistoryElement;
        new (): HTMLAppHistoryElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppManagementElementEventMap {
        "toggleVenueStatus": any;
        "addNewVenue": any;
    }
    interface HTMLAppManagementElement extends Components.AppManagement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppManagementElementEventMap>(type: K, listener: (this: HTMLAppManagementElement, ev: AppManagementCustomEvent<HTMLAppManagementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppManagementElementEventMap>(type: K, listener: (this: HTMLAppManagementElement, ev: AppManagementCustomEvent<HTMLAppManagementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppManagementElement: {
        prototype: HTMLAppManagementElement;
        new (): HTMLAppManagementElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElementEventMap {
        "addNewVenue": any;
    }
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAppRootElementEventMap>(type: K, listener: (this: HTMLAppRootElement, ev: AppRootCustomEvent<HTMLAppRootElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAppRootElementEventMap>(type: K, listener: (this: HTMLAppRootElement, ev: AppRootCustomEvent<HTMLAppRootElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLElementTagNameMap {
        "app-booking": HTMLAppBookingElement;
        "app-history": HTMLAppHistoryElement;
        "app-home": HTMLAppHomeElement;
        "app-management": HTMLAppManagementElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
    }
}
declare namespace LocalJSX {
    interface AppBooking {
        "bookings"?: any[];
        "onNewBooking"?: (event: AppBookingCustomEvent<any>) => void;
        "sports"?: any[];
        "venues"?: any[];
    }
    interface AppHistory {
        "bookings"?: any[];
        "onCancelBooking"?: (event: AppHistoryCustomEvent<any>) => void;
        "sports"?: any[];
        "venues"?: any[];
    }
    interface AppHome {
    }
    interface AppManagement {
        "onAddNewVenue"?: (event: AppManagementCustomEvent<any>) => void;
        "onToggleVenueStatus"?: (event: AppManagementCustomEvent<any>) => void;
        "sports"?: any[];
        "venues"?: any[];
    }
    interface AppProfile {
        "name"?: string;
    }
    interface AppRoot {
        "onAddNewVenue"?: (event: AppRootCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "app-booking": AppBooking;
        "app-history": AppHistory;
        "app-home": AppHome;
        "app-management": AppManagement;
        "app-profile": AppProfile;
        "app-root": AppRoot;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-booking": LocalJSX.AppBooking & JSXBase.HTMLAttributes<HTMLAppBookingElement>;
            "app-history": LocalJSX.AppHistory & JSXBase.HTMLAttributes<HTMLAppHistoryElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-management": LocalJSX.AppManagement & JSXBase.HTMLAttributes<HTMLAppManagementElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
        }
    }
}
